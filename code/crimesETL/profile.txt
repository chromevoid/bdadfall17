val mydata = sc.textFile("/user/jy2234/project/raw/Crimes.txt")
mydata.persist()

val id: org.apache.spark.rdd.RDD[Int] = mydata.map(_.split(",")(0).toInt)
id.min()
// 20749
id.max()
// 11143277

val date = mydata.map(_.split(",")(1))
date.min() 
// 01/01/2013 01:00:00 AM
date.max() 
// 12/31/2016 12:56:00 AM

val block = mydata.map(_.split(",")(2))
val block_length = block.map(_.length())
block_length.min() 
// 13
block_length.max() 
// 35

val IUCR = mydata.map(_.split(",")(3))
val IUCR_size = mydata.map(_.split(",")(3).length())
IUCR.distinct().count()
// 367
IUCR.min() 
// 4
IUCR.max() 
// 4

val primaryType = mydata.map(_.split(",")(4))
val primaryType = mydata.map(_.split(",")(4)).filter(_.contains("\""))

val description = mydata.map(_.split(",")(5)).filter(_.contains("\""))
description.take(5)
// Array[String] = Array("CYCLE, "CYCLE, "CYCLE, "CYCLE, "CYCLE)
description.count()
// Long = 3751 
mydata.count()
// Long = 1336566

================================================================================
/* I need to clean data here
 * otherwise I can't get correct later column fields
 */
val mydata_splitByQoute = mydata.map(line => line.split("\""))
mydata_splitByQoute.map(_.size).min() 
// Int = 1
mydata_splitByQoute.map(_.size).max() 
// Int = 7

mydata_splitByQoute.filter(_.size == 7).take(1)
// Array[Array[String]] = Array(Array(20824,03/16/2013 12:13:00 PM,003XX E 43RD ST,0110,HOMICIDE,FIRST DEGREE MURDER,, "CTA ", "", L, "", " PLATFORM", ,true,false,38,2013))

mydata_splitByQoute.filter(_.size == 6).take(1)
// Array[Array[String]] = Array()

mydata_splitByQoute.filter(_.size == 5).take(1)
// Array[Array[String]] = Array(Array(10181133,07/31/2015 06:00:00 PM,038XX N RACINE AVE,0917,MOTOR VEHICLE THEFT,, CYCLE, SCOOTER, BIKE W-VIN, ,, SCHOOL, PRIVATE, GROUNDS, ,false,false,6,2015))

mydata_splitByQoute.filter(_.size == 4).take(1)
// Array[Array[String]] = Array()

mydata_splitByQoute.filter(_.size == 3).take(1)
// Array[Array[String]] = Array(Array(10509107,05/03/2016 02:40:00 PM,001XX S PARKSIDE AVE,0460,BATTERY,SIMPLE,, SCHOOL, PUBLIC, GROUNDS, ,false,false,25,2016))

mydata_splitByQoute.filter(_.size == 2).take(1)
// Array[Array[String]] = Array()

mydata_splitByQoute.filter(_.size == 1).take(1)
// Array[Array[String]] = Array(Array(10508593,05/03/2016 09:00:00 PM,042XX W MADISON ST,1811,NARCOTICS,POSS: CANNABIS 30GMS OR LESS,SIDEWALK,true,false,26,2016))

mydata_splitByQoute.filter(_.size == 0).take(1)
// Array[Array[String]] = Array()

val mydata_format = mydata_splitByQoute.map(line => {
  var result = line(0)
  for (i <- 1 until line.size) {
    val subline = line(i).split(", ")
    if (subline.size == 1) {
      result = result + line(i)
    }
    else {
      for (j <- 0 until subline.size) {
        result = result + "@" + subline(j)
      }
    }
  }
  result
  })

mydata_format.map(_.split(",").size).min()
// 11
mydata_format.map(_.split(",").size).max() 
// 13

mydata_format.filter(_.split(",").size == 12).take(1)
mydata_format.filter(_.split(",").size == 13).take(1)

mydata_format.filter(_.split(",").size == 12).map(_.split(",")(6)).distinct().take(5)
// Array[String] = Array(MOTOR VEH, NON-VEH)

mydata_format.filter(_.contains(",MOTOR VEH,")).take(1)
// Array[String] = Array(10485730,03/13/2016 02:23:00 PM,017XX N CENTRAL AVE,1206,DECEPTIVE PRACTICE,THEFT BY LESSEE,MOTOR VEH,OTHER,false,false,25,2016)

mydata_format.filter(_.contains(",NON-VEH,")).take(1)
// Array(9019331,01/24/2013 09:00:00 AM,002XX N COLUMBUS DR,1205,DECEPTIVE PRACTICE,THEFT BY LESSEE,NON-VEH,HOTEL/MOTEL,false,false,32,2013)


mydata_format.filter(_.split(",").size == 13).map(_.split(",")(6)).distinct().take(5)
// Array[String] = Array(BUS)

mydata_format.filter(_.contains(",BUS,")).take(1)
// Array[String] = Array(10533028,05/23/2016 01:41:00 PM,132XX S BRAINARD AVE,0935,MOTOR VEHICLE THEFT,THEFT/RECOVERY: TRUCK,BUS,MHOME,PARKING LOT/GARAGE(NON.RESID.),false,false,55,2016)

val mydata_clean = mydata_format.map(line => {
  var result = line
  if (line.split(",").size == 12) {
    val line_split = line.split(",")
    result = line_split(0)
    for (i <- 1 until 5) {
      result = result + "," + line_split(i)
    }
    result = result + "," + "@" + line_split(5) + "@" + line_split(6)
    for (i <- 7 until 12) {
      result = result + "," + line_split(i)
    }
  }
  if (line.split(",").size == 13) {
    val line_split = line.split(",")
    result = line_split(0)
    for (i <- 1 until 5) {
      result = result + "," + line_split(i)
    }
    result = result + "," + "@" + line_split(5) + "@" + line_split(6) + "@" + line_split(7)
    for (i <- 8 until 13) {
      result = result + "," + line_split(i)
    }
  }
  result
})

mydata_clean.map(_.split(",").size).min()
// 11
mydata_clean.map(_.split(",").size).max()
// 11
================================================================================

val primaryType = mydata_clean.map(_.split(",")(4).length())
mydata_clean.map(_.split(",")(4)).distinct().count()
// 33
primaryType.min()
// 5
primaryType.max()
// 33

val description = mydata_clean.map(_.split(",")(5).length())
mydata_clean.map(_.split(",")(5)).distinct().count()
// 343 (373)
description.min()
// 5
description.max()
// 59

val locationDescription = mydata_clean.map(_.split(",")(6).length())
locationDescription.min()
// 0
locationDescription.max()
// 47

val arrest = mydata_clean.map(_.split(",")(7))
arrest.min()
// String = false
arrest.max()
// String = true

val domestic = mydata_clean.map(_.split(",")(8))
domestic.min()
// String = false
domestic.max()
// String = true

val communityArea = mydata_clean.map(_.split(",")(9))
communityArea.distinct().count()
// 79
// 79 = 77 + "" + 0

val year = mydata_clean.map(_.split(",")(10))
year.min()
// 2013
year.max()
// 2017

